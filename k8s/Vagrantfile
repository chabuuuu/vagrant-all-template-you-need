# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |k8s_lab|

  # Cấu hình chung cho tất cả các máy ảo
  k8s_lab.vm.provision "shell", inline: <<-SHELL
    echo "--- [COMMON] Bắt đầu cài đặt chung cho tất cả các node ---"
    echo "root:password" | chpasswd
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
    systemctl reload sshd

    export DEBIAN_FRONTEND=noninteractive
    sudo apt-get update
    # FIX: Cài thêm 'sshpass' để control plane có thể scp file cho worker
    sudo apt-get install -y apt-transport-https ca-certificates curl gpg sshpass

    sudo swapoff -a
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
EOF
    sudo modprobe overlay
    sudo modprobe br_netfilter

    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
EOF
    sudo sysctl --system

    sudo apt-get install -y containerd
    sudo mkdir -p /etc/containerd
    sudo containerd config default | sudo tee /etc/containerd/config.toml
    sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
    sudo systemctl restart containerd
    sudo systemctl enable containerd

    echo "--- [COMMON] Thêm Kubernetes apt repository v1.32 ---"
    sudo mkdir -p -m 755 /etc/apt/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

    sudo apt-get update
    sudo apt-get install -y kubelet kubeadm kubectl
    sudo apt-mark hold kubelet kubeadm kubectl
    echo "--- [COMMON] Cài đặt chung hoàn tất ---"
  SHELL

  # -----------------------------------------------------------------
  # 1. Định nghĩa Control Plane Node
  # -----------------------------------------------------------------
  k8s_lab.vm.define "controlPlaneNode" do |controlPlaneNode|
    controlPlaneNode.vm.provider "libvirt" do |libvirt|
      libvirt.cpus = 2
      libvirt.memory = "2096"
    end
    controlPlaneNode.vm.box = 'generic/ubuntu2004'
    controlPlaneNode.vm.network "private_network", ip: "192.168.122.22"
    controlPlaneNode.vm.hostname = "controlPlaneNode"

    controlPlaneNode.vm.provision "shell", inline: <<-SHELL
      echo "--- [CONTROL PLANE] Bắt đầu cấu hình Control Plane ---"
      sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.122.22

      mkdir -p /home/vagrant/.kube
      sudo cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      sudo chown vagrant:vagrant /home/vagrant/.kube/config
      
      echo "--- [CONTROL PLANE] Cài đặt Calico CNI ---"
      kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/calico.yaml

      # FIX: Tạo join script và đẩy trực tiếp đến các worker node qua SCP
      echo "--- [CONTROL PLANE] Tạo và sao chép join script cho Workers ---"
      sudo kubeadm token create --print-join-command > /tmp/join-cluster.sh

      WORKER_IPS=("192.168.122.23" "192.168.122.24")
      for IP in "${WORKER_IPS[@]}"; do
        echo "--> Đang sao chép join script đến ${IP}"
        sshpass -p 'password' scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /tmp/join-cluster.sh root@${IP}:/tmp/join-cluster.sh
      done

      # Cài đặt ArgoCD vẫn giữ nguyên
      echo "--- [CONTROL PLANE] Cài đặt Argo CD ---"
      kubectl --kubeconfig=/etc/kubernetes/admin.conf create namespace argocd
      kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      
      echo "Đang chờ Argo CD khởi động, vui lòng chờ khoảng 90 giây..."
      sleep 90

      echo "--- [CONTROL PLANE] Cấu hình cổng cố định cho Argo CD ---"
      kubectl --kubeconfig=/etc/kubernetes/admin.conf patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort", "ports": [ { "port": 443, "targetPort": 8080, "protocol": "TCP", "name": "https", "nodePort": 30007 } ]}}'

      echo "--- [CONTROL PLANE] Cấu hình hoàn tất! ---"
      echo "✅ Cluster đã sẵn sàng!"
      echo "✅ Argo CD đã được cài đặt."
      echo "   - Truy cập Argo CD UI tại: https://192.168.122.22:30007"
      echo "   - Lấy mật khẩu admin ban đầu bằng lệnh sau trên controlPlaneNode:"
      echo "     kubectl --kubeconfig=/etc/kubernetes/admin.conf -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d; echo"
    SHELL
  end

  # -----------------------------------------------------------------
  # 2. Định nghĩa Worker Nodes
  # -----------------------------------------------------------------
  ["workerNodeA", "workerNodeB"].each_with_index do |node_name, i|
    k8s_lab.vm.define node_name do |node|
      node.vm.provider "libvirt" do |libvirt|
        libvirt.cpus = 1
        libvirt.memory = "2096"
      end
      node.vm.box = 'generic/ubuntu2004'
      node.vm.network "private_network", ip: "192.168.122.#{23 + i}"
      node.vm.hostname = node_name
      
      node.vm.provision "shell", inline: <<-SHELL
        # FIX: Chờ file join trong thư mục /tmp (do control plane đẩy qua)
        echo "--- [#{node_name.upcase}] Chờ lệnh join từ Control Plane (trong /tmp)... ---"
        while [ ! -f /tmp/join-cluster.sh ]; do
          sleep 5
        done
        echo "--- [#{node_name.upcase}] Đã nhận lệnh, đang join vào cluster... ---"
        sudo sh /tmp/join-cluster.sh
        # Dọn dẹp file sau khi join
        sudo rm /tmp/join-cluster.sh
        echo "--- [#{node_name.upcase}] Join thành công! ---"
      SHELL
    end
  end
end